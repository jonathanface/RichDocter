# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - production

env:
  AWS_REGION: ${{ secrets.AWS_REGION }} # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: richdocter # set this to your Amazon ECR repository name
  ECS_SERVICE: richdocter-service # set this to your Amazon ECS service name
  ECS_CLUSTER: richdocter-cluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/aws_ecs_task.json # set this to the path to your Amazon ECS task definition                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    richdocter # set this to the name of the container in the
    # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" . \
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --build-arg AWS_MAX_RETRIES=${{ secrets.AWS_MAX_RETRIES }} \
          --build-arg AWS_BLOCKTABLE_MIN_WRITE_CAPACITY=${{ secrets.AWS_BLOCKTABLE_MIN_WRITE_CAPACITY }} \
          --build-arg GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }} \
          --build-arg GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }} \
          --build-arg GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }} \
          --build-arg AMAZON_OAUTH_CLIENT_ID=${{ secrets.AMAZON_OAUTH_CLIENT_ID }} \
          --build-arg AMAZON_OAUTH_CLIENT_SECRET=${{ secrets.AMAZON_OAUTH_CLIENT_SECRET }} \
          --build-arg AMAZON_OAUTH_REDIRECT_URL=${{ secrets.AMAZON_OAUTH_REDIRECT_URL }} \
          --build-arg MSN_OAUTH_CLIENT_ID=${{ secrets.MSN_OAUTH_CLIENT_ID }} \
          --build-arg MSN_OAUTH_CLIENT_SECRET=${{ secrets.MSN_OAUTH_CLIENT_SECRET }} \
          --build-arg MSN_OAUTH_REDIRECT_URL=${{ secrets.MSN_OAUTH_REDIRECT_URL }} \
          --build-arg ROOT_URL=${{ secrets.ROOT_URL }} \
          --build-arg SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
          --build-arg VERSION=${{ github.sha }} \
          --build-arg STRIPE_SECRET=${{ secrets.STRIPE_SECRET }} \
          --build-arg STRIPE_KEY=${{ secrets.STRIPE_KEY }} \
          --build-arg REACT_APP_STRIPE_KEY=${{ secrets.STRIPE_KEY }} \
          --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{  secrets.AWS_ECS_SERVICE }}
          cluster: ${{  secrets.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true
