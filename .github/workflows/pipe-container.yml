name: Deploy to Amazon ECS

on:
  push:
    branches:
      - production
      - staging

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: richdocter

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    env:
      ECS_SERVICE: ${{ github.ref == 'refs/heads/production' && secrets.AWS_ECS_SERVICE || secrets.AWS_ECS_SERVICE_STAGING }}
      ECS_CLUSTER: ${{ github.ref == 'refs/heads/production' && secrets.AWS_ECS_CLUSTER || secrets.AWS_ECS_CLUSTER_STAGING }}
      ECS_TASK_DEFINITION: ${{ github.ref == 'refs/heads/production' && '.aws/aws_ecs_task.json' || '.aws/aws_ecs_task_staging.json' }}
      STRIPE_KEY: ${{ github.ref == 'refs/heads/production' && secrets.STRIPE_KEY || secrets.STRIPE_KEY_STAGING }}
      STRIPE_SECRET: ${{ github.ref == 'refs/heads/production' && secrets.STRIPE_SECRET || secrets.STRIPE_SECRET_STAGING }}
      MODE: ${{ github.ref_name }}
      CONTAINER_NAME: ${{ github.ref == 'refs/heads/production' && 'rd-prod' || 'rd-staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" . \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_REGION=${{ env.AWS_REGION }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_MAX_RETRIES=${{ secrets.AWS_MAX_RETRIES }} \
            --build-arg AWS_BLOCKTABLE_MIN_WRITE_CAPACITY=${{ secrets.AWS_BLOCKTABLE_MIN_WRITE_CAPACITY }} \
            --build-arg GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }} \
            --build-arg GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }} \
            --build-arg GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }} \
            --build-arg AMAZON_OAUTH_CLIENT_ID=${{ secrets.AMAZON_OAUTH_CLIENT_ID }} \
            --build-arg AMAZON_OAUTH_CLIENT_SECRET=${{ secrets.AMAZON_OAUTH_CLIENT_SECRET }} \
            --build-arg AMAZON_OAUTH_REDIRECT_URL=${{ secrets.AMAZON_OAUTH_REDIRECT_URL }} \
            --build-arg MSN_OAUTH_CLIENT_ID=${{ secrets.MSN_OAUTH_CLIENT_ID }} \
            --build-arg MSN_OAUTH_CLIENT_SECRET=${{ secrets.MSN_OAUTH_CLIENT_SECRET }} \
            --build-arg MSN_OAUTH_REDIRECT_URL=${{ secrets.MSN_OAUTH_REDIRECT_URL }} \
            --build-arg ROOT_URL=${{ secrets.ROOT_URL }} \
            --build-arg SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
            --build-arg VERSION=${{ github.sha }} \
            --build-arg STRIPE_SECRET=${{ env.STRIPE_SECRET }} \
            --build-arg STRIPE_KEY=${{ env.STRIPE_KEY }} \
            --build-arg VITE_STRIPE_KEY=${{ env.STRIPE_KEY }} \
            --build-arg VITE_MODE=${{ env.MODE }} \
            --build-arg MODE=${{ env.MODE }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      ECS_SERVICE: ${{ github.ref == 'refs/heads/production' && secrets.AWS_ECS_SERVICE || secrets.AWS_ECS_SERVICE_STAGING }}
      ECS_CLUSTER: ${{ github.ref == 'refs/heads/production' && secrets.AWS_ECS_CLUSTER || secrets.AWS_ECS_CLUSTER_STAGING }}
      ECS_TASK_DEFINITION: ${{ github.ref == 'refs/heads/production' && '.aws/aws_ecs_task.json' || '.aws/aws_ecs_task_staging.json' }}
      CONTAINER_NAME: ${{ github.ref == 'refs/heads/production' && 'rd-prod' || 'rd-staging' }}
  
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Debug IMAGE variable
        run: |
          echo "IMAGE: $IMAGE"  # Print the IMAGE environment variable
          echo "IMAGE (as env.IMAGE): ${{ needs.build.outputs.image }}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true